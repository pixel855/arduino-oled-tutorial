#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <TM1637Display.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#include <Servo.h>
#include <DHT.h>

#define DHTPIN 32
#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);

#define TRIG_PIN 34
#define ECHO_PIN 35

#define ledR 46
#define ledY 48
#define ledG 50

Servo myservo; // membuat variabel servo untuk dikendalikan
int pos = 0; // deklarasi variabel untuk posisi sudut

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT);

#define CLK 2
#define DIO 3

TM1637Display tm(CLK, DIO);
const uint8_t data[] = {SEG_G, SEG_G, SEG_G, SEG_G};
const uint8_t done[] = {
  SEG_B | SEG_C | SEG_D | SEG_E | SEG_G,           // d
  SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F,   // O
  SEG_C | SEG_E | SEG_G,                           // n
  SEG_A | SEG_D | SEG_E | SEG_F | SEG_G            // E
};
const uint8_t allON[] = {0xff, 0xff, 0xff, 0xff};

uint8_t blank[] = { 0x00, 0x00, 0x00, 0x00 };
String password = "1234";
String inpws;
int a = 0, b = 0, c = 0, d = 0;
int total;
int cout = 0;
int cin = 0;

LiquidCrystal_I2C lcd(0x27, 20, 4);

const int ROW_NUM = 4;     //four rows
const int COLUMN_NUM = 4;  //four columns

char keys[ROW_NUM][COLUMN_NUM] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};

byte pin_rows[ROW_NUM] = { 22, 24, 26, 28 };       //connect to the row pinouts of the keypad
byte pin_column[COLUMN_NUM] = { 23, 25, 27, 29 };  //connect to the column pinouts of the keypad

Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM);

byte potensio = A0;



int kondisi = 0;
int nilai;
int output;
unsigned int counter = 0;

int pbuzzer = 3;

// 'george', 128x64px
const unsigned char epd_bitmap_george [] PROGMEM = {
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xef, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x8f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x08, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x01, 0x7c, 0x0f, 0xe0, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xe1, 0xe0, 0xbf, 0xff, 0x80, 0x4f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x87, 0xfc, 0x5f, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x0f, 0xff, 0x07, 0xfc, 0x3f, 0x85, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x1f, 0xff, 0x92, 0x90, 0x7f, 0xe2, 0x7f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x3f, 0xfb, 0x84, 0x00, 0xff, 0xe1, 0x3f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x3f, 0xee, 0x80, 0x01, 0xd7, 0xf0, 0x5f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xdf, 0xc8, 0x03, 0xff, 0xf8, 0xbf, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xff, 0xe0, 0x03, 0x7d, 0xfc, 0x2f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xfd, 0xe0, 0x07, 0xff, 0xf8, 0x3f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xb0, 0xe0, 0x07, 0x8f, 0xfc, 0x17, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xf4, 0xe0, 0x07, 0x87, 0xfe, 0x17, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x3f, 0xf0, 0x60, 0x07, 0x27, 0xfe, 0x17, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x3f, 0xf0, 0xe0, 0x03, 0x03, 0xfe, 0x37, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfd, 0x1f, 0xf0, 0xc0, 0x03, 0x87, 0xfe, 0x3f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x1f, 0xfd, 0xc0, 0x83, 0x87, 0xfc, 0xbf, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0x8f, 0xff, 0x80, 0x01, 0xef, 0xfc, 0x6f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfe, 0xc3, 0xfe, 0x00, 0x00, 0xff, 0xf9, 0x7f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0xf8, 0x00, 0x00, 0x7f, 0xf0, 0xdf, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x70, 0x00, 0x07, 0xc0, 0x3f, 0xe1, 0xbf, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf9, 0xf0, 0x00, 0x3f, 0xf0, 0x03, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf8, 0xf8, 0x00, 0x7f, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf8, 0xfc, 0x00, 0xff, 0xfe, 0x00, 0x07, 0xdf, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf0, 0x7c, 0x02, 0xff, 0xff, 0x00, 0x07, 0x9f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf0, 0x20, 0x03, 0x3f, 0xff, 0x80, 0x05, 0x0f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x83, 0x9f, 0xff, 0xc0, 0x40, 0x07, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0xc3, 0xe7, 0xff, 0xc0, 0x80, 0x07, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xc0, 0x01, 0xe0, 0xf0, 0xef, 0xc1, 0xc0, 0x03, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xc0, 0x01, 0xf0, 0x7f, 0xf7, 0x83, 0xc0, 0x01, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0x80, 0x03, 0xfa, 0x0f, 0xfe, 0x07, 0xe0, 0x01, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0x00, 0x03, 0xf1, 0xc0, 0x00, 0x0f, 0xe0, 0x00, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0x00, 0x03, 0x80, 0x78, 0x00, 0x01, 0xf0, 0x00, 0x7f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x03, 0x00, 0x0f, 0xc8, 0x00, 0x70, 0x00, 0x7f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x7f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x3f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
  epd_bitmap_george
};


const unsigned char homelogo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xe0, 0xfc, 0x3f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3f, 0x83, 0xf0, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x3c, 0x0f, 0xc3, 0xc1, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x30, 0x7e, 0x0f, 0xf0, 0x7e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x01, 0xf8, 0x3f, 0xfe, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x7e, 0x07, 0xc1, 0xff, 0xff, 0x83, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x78, 0x3f, 0x07, 0xff, 0xff, 0xe0, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x60, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x1f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xf8, 0x3f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xc1, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x0f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf0, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xf8, 0x3e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0x07, 0xff, 0xff,
  0xff, 0xff, 0x87, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe1, 0xff, 0xff,
  0xff, 0xff, 0x1f, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};




String input = "";

// Variabel
bool isRunning = false;
bool isPaused = false;
unsigned long startTime = 0;
unsigned long elapsedTime = 0;
unsigned long remainingTime = 0;

// Waktu awal (detik)
const unsigned long COUNTDOWN_TIME = 2023;

void setup()
{
    tm.showNumberDecEx(COUNTDOWN_TIME, 0b01000000, true);

  pinMode(ledR, OUTPUT); //varibel ledMerah menjadi output
  pinMode(ledG, OUTPUT); //varibel ledKuning menjadi output
  pinMode(ledY, OUTPUT); //varibel ledHijau menjadi output

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  dht.begin();

  pinMode(pbuzzer, OUTPUT);
  tm.setBrightness(5);
  tm.clear();

  lcd.begin(20, 4);
  lcd.init();
  lcd.backlight();
  digitalWrite(ledR, LOW);
  digitalWrite(ledG, LOW);
  digitalWrite(ledY, LOW);


  myservo.attach(6);

  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  //byte segments[] = {0b00000000, 0b01000000, 0b00000000, 0b00000000};  // Segmen yang diaktifkan

  pertama();

}

void loop()
{
  while (kondisi == 0)
  {

    char key = keypad.getKey();
    lcd.setCursor (0, 0);
    lcd.print("PILIH MENU");
    lcd.setCursor (0, 1);
    lcd.print("A.Pot");
    lcd.setCursor (0, 2);
    lcd.print("B.Jarak");
    lcd.setCursor (0, 3);
    lcd.print("C.Counting");
    tm.setSegments(data);


    if (key)
    {
      if (key == 'A' )
      {
        kondisi = 1;
        lcd.clear();
      }
      else if (key == 'B' )
      {
        kondisi = 2;
        lcd.clear();
      }
      else if (key == 'C' )
      {
        updateDisplay();
        kondisi = 3;
        lcd.clear();
      }
    }
  }

  while (kondisi == 1)
  {
    char key = keypad.getKey();
    nilai = analogRead(potensio);
    output = map(nilai, 0, 1023, 0, 100);
    lcd.setCursor (0, 0);
    lcd.print("**");
    lcd.setCursor (0, 1);
    lcd.print("Value : ");
    lcd.print(nilai);
    lcd.setCursor (0, 2);
    lcd.print("Map   : ");
    lcd.print(output);
    lcd.setCursor (0, 3);
    lcd.print("**");
    lcd.print(output);
    lcd.clear();
    delay(50);
    digitalWrite(ledG, HIGH);
    digitalWrite(ledY, LOW);
    digitalWrite(ledR, LOW);

    if (key)
    {
      if (key == '#' )
      {
        kondisi = 0;
        lcd.clear();
      }
    }
  }

  while (kondisi == 2)
  {
    
    char key = keypad.getKey();

    long duration, distance;
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    duration = pulseIn(ECHO_PIN, HIGH);

    distance = duration * 0.034 / 2; // Menghitung jarak berdasarkan waktu
    lcd.setCursor (0, 0);
    lcd.print("***");
    lcd.setCursor (0, 1);
    lcd.print("Jarak : ");
    lcd.print(distance);

    // Membaca suhu dan kelembaban menggunakan sensor DHT22
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    lcd.setCursor (0, 2);
    lcd.print("Hum   : ");
    lcd.print(humidity);
    lcd.setCursor (0, 3);
    lcd.print("Temp  : ");
    lcd.print(temperature);
    if (key)
    {
      if (key == '#' )
      {
        kondisi = 0;
        lcd.clear();
      }
    }
  }

  while (kondisi == 3)
  {
    char key = keypad.getKey();

    if (key) {
      if (key == 'A') {
        if (input == password) {
          // Password is correct
          tm.showNumberDecEx(8888);
          lcd.setCursor(0, 0);
          lcd.print("Benar");
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, HIGH);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, HIGH);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, HIGH);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);        
          input = "";
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Counting Down");
          updateDisplay();
          tm.showNumberDecEx(COUNTDOWN_TIME, 0b00000000, true);
          countingdown();
        }
        else if (input != password) {
          // Password is incorrect
          lcd.setCursor(0, 0);
          lcd.print("Salah");
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          digitalWrite(ledR, HIGH);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, HIGH);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, HIGH);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          delay(500);
          digitalWrite(ledR, LOW);
          digitalWrite(ledG, LOW);
          digitalWrite(ledY, LOW);
          input = "";
          updateDisplay();
          lcd.clear();
        }
      }
      else if (key == '*') {
        input = "";
        updateDisplay();

      }
      else if (key == 'D') {
        input = "";
        updateDisplay();
            tm.setSegments(data);
kondisi = 0;
        lcd.clear();
      } else {
        input += key;
        if (input.length() > password.length()) {
          input.remove(0, 1);
        }
        updateDisplay();
      }
    }
  }


  
}

void pertama() {
  delay(50);
  oled.clearDisplay(); //clear sebelum tampilan baru
  oled.drawBitmap(0, 0, homelogo, 128, 64, WHITE);
  oled.display(); //tampilkan data
  digitalWrite(pbuzzer, HIGH);
  delay(500);
  digitalWrite(pbuzzer, LOW);
  delay(500);
  digitalWrite(pbuzzer, HIGH);
  delay(500);
  digitalWrite(pbuzzer, LOW);
  delay(500);
  digitalWrite(pbuzzer, HIGH);
  delay(500);
  digitalWrite(pbuzzer, LOW);
  delay(500);
  digitalWrite(ledR, HIGH);
  digitalWrite(ledG, LOW);
  digitalWrite(ledY, LOW);
  delay(500);
  digitalWrite(ledR, LOW);
  digitalWrite(ledG, LOW);
  digitalWrite(ledY, HIGH);
  delay(500);
  digitalWrite(ledR, LOW);
  digitalWrite(ledG, HIGH);
  digitalWrite(ledY, LOW);
  delay(500);
  digitalWrite(ledR, LOW);
  digitalWrite(ledG, LOW);
  digitalWrite(ledY, LOW);
  oled.clearDisplay(); //clear sebelum tampilan baru
  oled.drawBitmap(0, 0, epd_bitmap_george, 128, 64, WHITE);
  oled.display(); //tampilkan data
  lcd.setCursor (4, 0);
  lcd.print("Uprak Mikro");
  lcd.setCursor (2, 1);
  lcd.print("Politeknik ATMI");
  lcd.setCursor (8, 2);
  lcd.print("SOLO");
  lcd.setCursor (5, 3);
  lcd.print("Juni 2023");
  delay(2000);
  lcd.clear();

}

void updateDisplay() {
  uint8_t data[] = {0x3f, 0x3f, 0x3f, 0x3f};

  for (int i = 0; i < input.length(); i++) {
    data[3 - i] = tm.encodeDigit(input[input.length() - 1 - i] - '0');
  }

  tm.setSegments(data);
}

void countingdown() {
  while(true){
  char key = keypad.getKey();
  
  if (key == 'A') {
    // Tombol A ditekan
    if (!isRunning) {
      // Mulai countdown
      isRunning = true;
      isPaused = false;
      startTime = millis();
      remainingTime = COUNTDOWN_TIME * 1000;
    } else if (isPaused) {
      // Lanjutkan countdown setelah dijeda
      isPaused = false;
      startTime = millis() - elapsedTime;
    }
  } else if (key == 'B') {
    // Tombol B ditekan, jeda/resume countdown
    if (isRunning) {
      isPaused = !isPaused;
      if (isPaused) {
        // Jika dijeda, catat waktu yang sudah berlalu
        elapsedTime = millis() - startTime;
      } else {
        // Jika dilanjutkan, atur ulang waktu mulai
        startTime = millis() - elapsedTime;
      }
    }
  } else if (key == 'C') {
    // Tombol C ditekan, reset countdown
    isRunning = false;
    isPaused = false;
    tm.showNumberDecEx(COUNTDOWN_TIME, 0b00000000, true);
  }else if (key == 'D') {
    lcd.clear();
    break;
  }
  
  
  if (isRunning && !isPaused) {
    unsigned long currentTime = millis();
    elapsedTime = currentTime - startTime;
    remainingTime = max(0, COUNTDOWN_TIME * 1000 - elapsedTime);
    
    if (remainingTime == 0) {
      // Countdown selesai
      isRunning = false;
      tm.showNumberDecEx(0, 0b00000000, true);
    } else {
      // Tampilkan waktu tersisa di TM1637
      int seconds = remainingTime / 1000;
      tm.showNumberDecEx(seconds, 0b00000000, true);
    }
  }
 }
}
